{"version":3,"sources":["webpack:///./node_modules/numeral/numeral.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./node_modules/numeral/locales.js"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","factory","call","exports","__webpack_require__","module","undefined","this","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","args","Array","prototype","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","allSuffixes","concat","filter","item","unformatRegex","bytes","suffix","bytesMultiplier","symbols","before","after","exponential","toExponential","num","hours","floor","minutes","seconds","timeArray","process","normalizeArray","allowAboveRoot","up","last","unshift","splitPathRe","splitPath","filename","exec","xs","f","res","push","resolve","resolvedPath","resolvedAbsolute","path","cwd","charAt","p","normalize","isAbsolute","trailingSlash","paths","index","relative","from","to","arr","end","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","result","root","dir","basename","ext","extname","str","__WEBPACK_AMD_DEFINE_ARRAY__","apply","remainder","1","5","8","70","80","2","7","20","50","3","4","100","6","9","10","30","60","90","a","c"],"mappings":"2GAAA,IAAAA,EAAAC;;;;;;;;;;;;;;;CAQA,SAAAC,EAAAC,GAEQH,EAAA,EAAcC,EAAA,oBAAAD,IAAAI,KAAAC,EAAAC,EAAAD,EAAAE,GAAAP,OAAAQ,IAAAP,IAAAM,EAAAF,QAAAJ,IAFtB,CAQCQ,EAAA,WAKD,IAAAC,EACAC,EACAC,EAAA,QACAC,EAAA,GACAC,EAAA,GACAC,EAAA,CACAC,cAAA,KACAC,WAAA,KACAC,WAAA,KACAC,cAAA,MACAC,mBAAA,GAEAC,EAAA,CACAL,cAAAD,EAAAC,cACAC,WAAAF,EAAAE,WACAC,WAAAH,EAAAG,WACAC,cAAAJ,EAAAI,cACAC,kBAAAL,EAAAK,mBASA,SAAAE,EAAAC,EAAAC,GACAf,KAAAgB,OAAAF,EAEAd,KAAAiB,OAAAF,EAi8BA,OA97BAd,EAAA,SAAAa,GACA,IAAAI,EACAC,EACAC,EACAC,EAEA,GAAApB,EAAAqB,UAAAR,GACAI,EAAAJ,EAAAI,aACS,OAAAJ,GAAA,qBAAAA,EACTI,EAAA,OACS,UAAAJ,GAAAZ,EAAAqB,MAAAT,GACTI,EAAA,UACS,qBAAAJ,EACT,GAAAF,EAAAJ,YAAAM,IAAAF,EAAAJ,WACAU,EAAA,OACa,GAAAN,EAAAH,YAAAK,IAAAF,EAAAH,aAAAK,EAAAU,QAAA,eAAAC,OACbP,EAAA,SACa,CACb,IAAAC,KAAAf,EAGA,GAFAiB,EAAA,oBAAAjB,EAAAe,GAAAO,QAAAC,SAAAvB,EAAAe,GAAAO,QAAAC,WAAAvB,EAAAe,GAAAO,QAAAC,SAEAN,GAAAP,EAAAc,MAAAP,GAAA,CACAD,EAAAhB,EAAAe,GAAAQ,SAEA,MAIAP,KAAAnB,EAAAC,EAAA2B,eAEAX,EAAAE,EAAAN,QAGAI,EAAAY,OAAAhB,IAAA,KAGA,WAAAD,EAAAC,EAAAI,IAIAjB,EAAA8B,QAAA5B,EAGAF,EAAAqB,UAAA,SAAAU,GACA,OAAAA,aAAAnB,GAIAZ,EAAAC,IAAA,CAEA+B,eAAA,SAAAf,EAAAgB,EAAAC,GACA,IAWAC,EACAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EApBAC,EAAAtC,EAAAJ,EAAAW,QAAAL,eACAqC,GAAA,EACAC,GAAA,EACAC,EAAA,EACAC,EAAA,GACAC,EAAA,KACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,GACAC,GAAA,EAgGA,GAnFAnC,KAAA,EAEAmB,EAAAiB,KAAAjB,IAAAnB,GAIAjB,EAAAC,EAAAqD,SAAArB,EAAA,MACAU,GAAA,EACAV,IAAAV,QAAA,iBACavB,EAAAC,EAAAqD,SAAArB,EAAA,MAAAjC,EAAAC,EAAAqD,SAAArB,EAAA,QACbM,EAAAvC,EAAAC,EAAAqD,SAAArB,EAAA,KAAAA,EAAAsB,QAAA,KAAAtC,EAAA,EAAAgB,EAAAsB,QAAA,QACAtB,IAAAV,QAAA,gBAIAvB,EAAAC,EAAAqD,SAAArB,EAAA,OACAE,EAAAF,EAAAN,MAAA,eAEAQ,SAAA,GAGAnC,EAAAC,EAAAqD,SAAArB,EAAA,QACAa,EAAA,KAGAb,IAAAV,QAAA,IAAAiC,OAAAV,EAAA,gBAEAV,GAAAW,IAAAZ,GAAA,MAAAA,GAEAW,GAAAJ,EAAAe,cAAAV,SACA9B,GAAA8B,GACiBX,EAAAW,GAAAX,GAAAY,IAAAb,GAAA,MAAAA,GAEjBW,GAAAJ,EAAAe,cAAAT,QACA/B,GAAA+B,GACiBZ,EAAAY,GAAAZ,GAAAa,IAAAd,GAAA,MAAAA,GAEjBW,GAAAJ,EAAAe,cAAAR,QACAhC,GAAAgC,IACiBb,EAAAa,GAAAb,GAAAc,IAAAf,GAAA,MAAAA,KAEjBW,GAAAJ,EAAAe,cAAAP,SACAjC,GAAAiC,IAKAlD,EAAAC,EAAAqD,SAAArB,EAAA,SACAW,GAAA,EACAX,IAAAV,QAAA,YAIAc,EAAApB,EAAAyC,WAAAC,MAAA,QACArB,EAAAL,EAAA0B,MAAA,QACAnB,EAAAP,EAAAsB,QAAA,KACAV,GAAAZ,EAAA0B,MAAA,QAAAA,MAAA,QAAAhC,MAAA,WAAAH,OAEAc,GACAtC,EAAAC,EAAAqD,SAAAhB,EAAA,MACAA,IAAAf,QAAA,QACAe,IAAAqB,MAAA,KACAR,EAAAnD,EAAAC,EAAA2D,QAAA3C,EAAAqB,EAAA,GAAAd,OAAAc,EAAA,GAAAd,OAAAU,EAAAI,EAAA,GAAAd,SAEA2B,EAAAnD,EAAAC,EAAA2D,QAAA3C,EAAAqB,EAAAd,OAAAU,GAGAG,EAAAc,EAAAQ,MAAA,QAGAR,EADAnD,EAAAC,EAAAqD,SAAAH,EAAA,KACAT,EAAAmB,WAAAV,UAAAQ,MAAA,QAEA,GAGAf,GAAA,IAAAf,OAAAsB,EAAAW,MAAA,MACAX,EAAA,KAGAd,EAAArC,EAAAC,EAAA2D,QAAA3C,EAAA,EAAAiB,GAIAY,IAAAX,GAAAN,OAAAQ,IAAA,KAAAS,IAAAJ,EAAAe,cAAAV,SAGA,OAFAV,EAAA0B,OAAAlC,OAAAQ,GAAA,KAEAS,GACA,KAAAJ,EAAAe,cAAAP,SACAJ,EAAAJ,EAAAe,cAAAR,QACA,MACA,KAAAP,EAAAe,cAAAR,QACAH,EAAAJ,EAAAe,cAAAT,QACA,MACA,KAAAN,EAAAe,cAAAT,QACAF,EAAAJ,EAAAe,cAAAV,SACA,MAWA,GALA/C,EAAAC,EAAAqD,SAAAjB,EAAA,OACAA,IAAAyB,MAAA,GACAV,GAAA,GAGAf,EAAAb,OAAAqB,EACA,QAAAmB,EAAAnB,EAAAR,EAAAb,OAAuDwC,EAAA,EAAOA,IAC9D3B,EAAA,IAAAA,EAwBA,OApBAG,GAAA,IACAH,IAAAqB,WAAAnC,QAAA,0BAA2D,KAAAmB,EAAAmB,WAAArB,YAG3D,IAAAP,EAAAsB,QAAA,OACAlB,EAAA,IAGAI,EAAAJ,EAAAc,GAAAL,GAAA,IAEAH,EACAF,GAAAE,GAAAS,EAAA,QAAAX,GAAAE,GAAAS,EAAA,QAEAb,GAAA,EACAE,EAAA,IAAAF,GAAAa,EAAA,SAAAX,KAAAW,EAAA,SACiBA,IACjBX,EAAA,IAAAA,GAIAA,GAGAb,eAAA,SAAAqC,GACA,IAQAC,EACAjD,EAEAG,EAXAsB,EAAAtC,EAAAO,EAAAL,eACA6D,EAAAF,EACAR,EAAA,CACAP,SAAA,EACAD,QAAA,EACAD,QAAA,EACAD,SAAA,IAOA,GAAApC,EAAAJ,YAAA0D,IAAAtD,EAAAJ,WACAU,EAAA,OACa,GAAAN,EAAAH,YAAAyD,IAAAtD,EAAAH,aAAAyD,EAAA1C,QAAA,eAAAC,OACbP,EAAA,SACa,CAOb,IAAAiD,KANAjD,EAAA,EAEA,MAAAyB,EAAAmB,WAAAV,UACAc,IAAA1C,QAAA,UAAAA,QAAAmB,EAAAmB,WAAAV,QAAA,MAGAM,EAGA,GAFArC,EAAA,IAAAoC,OAAA,YAAAd,EAAAe,cAAAS,GAAA,aAAAxB,EAAA0B,SAAAC,OAAA,iBAEAF,EAAAxC,MAAAP,GAAA,CACAH,GAAAoC,KAAAiB,IAAA,GAAAb,EAAAS,IACA,MAKAjD,IAAAgD,EAAAN,MAAA,KAAAnC,OAAA6B,KAAAkB,IAAAN,EAAAN,MAAA,KAAAnC,OAAA,EAAAyC,EAAAN,MAAA,KAAAnC,OAAA,WAGAyC,IAAA1C,QAAA,iBAEAN,GAAAY,OAAAoC,GAGA,OAAAhD,GAEAK,MAAA,SAAAL,GACA,wBAAAA,GAAAK,MAAAL,IAEAqC,SAAA,SAAAW,EAAAO,GACA,WAAAP,EAAAV,QAAAiB,IAEAC,OAAA,SAAAR,EAAAS,EAAAC,GACA,OAAAV,EAAAH,MAAA,EAAAa,GAAAD,EAAAT,EAAAH,MAAAa,IAEAC,OAAA,SAAAC,EAAAC,GACA,UAAA/E,KACA,UAAAgF,UAAA,sDAGA,uBAAAD,EACA,UAAAC,UAAAD,EAAA,sBAGA,IAGA7D,EAHA+D,EAAAC,OAAAJ,GACAK,EAAAF,EAAAxD,SAAA,EACA2D,EAAA,EAGA,OAAAC,UAAA5D,OACAP,EAAAmE,UAAA,OACa,CACb,MAAAD,EAAAD,KAAAC,KAAAH,GACAG,IAGA,GAAAA,GAAAD,EACA,UAAAH,UAAA,+CAGA9D,EAAA+D,EAAAG,KAEA,KAAkBA,EAAAD,EAASC,IAC3BA,KAAAH,IACA/D,EAAA6D,EAAA7D,EAAA+D,EAAAG,KAAAH,IAGA,OAAA/D,GAOAoE,WAAA,SAAAC,GACA,IAAAC,EAAAD,EAAA5B,WAAAC,MAAA,KAEA,OAAA4B,EAAA/D,OAAA,IAAA6B,KAAAiB,IAAA,GAAAiB,EAAA,GAAA/D,SAOAgE,iBAAA,WACA,IAAAC,EAAAC,MAAAC,UAAA7B,MAAApE,KAAA0F,WAEA,OAAAK,EAAAb,OAAA,SAAAgB,EAAAC,GACA,IAAAC,EAAA7F,EAAAoF,WAAAQ,GACA,OAAAD,EAAAE,EAAAF,EAAAE,GACa,IAQblC,QAAA,SAAA3C,EAAA8E,EAAA7D,EAAA8D,GACA,IAEAC,EACAC,EACAC,EACA1D,EALA2D,EAAAnF,EAAAyC,WAAAC,MAAA,KACA0C,EAAAN,GAAAC,GAAA,GAuBA,OAfAC,EADA,IAAAG,EAAA5E,OACA6B,KAAAkB,IAAAlB,KAAAiD,IAAAF,EAAA,GAAA5E,OAAA6E,GAAAN,GAEAM,EAGAF,EAAA9C,KAAAiB,IAAA,GAAA2B,GAGAxD,GAAAP,EAAAjB,EAAA,KAAAgF,GAAAE,GAAAvC,QAAAqC,GAEAD,EAAAD,EAAAE,IACAC,EAAA,IAAA1C,OAAA,YAAoDwC,GAAAD,EAAAE,IAAA,MACpDxD,IAAAlB,QAAA2E,EAAA,KAGAzD,IAKAzC,EAAAW,UAGAX,EAAAG,UAGAH,EAAAI,UAKAJ,EAAA0C,OAAA,SAAA6D,GAKA,OAJAA,IACA5F,EAAAL,cAAAiG,EAAAC,eAGA7F,EAAAL,eAMAN,EAAAyG,WAAA,SAAAF,GACA,IAAAA,EACA,OAAAnG,EAAAO,EAAAL,eAKA,GAFAiG,IAAAC,eAEApG,EAAAmG,GACA,UAAAG,MAAA,oBAAAH,GAGA,OAAAnG,EAAAmG,IAGAvG,EAAA2G,MAAA,WACA,QAAAC,KAAAvG,EACAM,EAAAiG,GAAAvG,EAAAuG,IAIA5G,EAAAO,WAAA,SAAA0B,GACAtB,EAAAJ,WAAA,oBAAA0B,EAAA,MAGAjC,EAAAQ,WAAA,SAAAyB,GACAtB,EAAAH,WAAA,oBAAAyB,EAAA,MAGAjC,EAAAS,cAAA,SAAAwB,GACAtB,EAAAF,cAAA,oBAAAwB,EAAA,OAGAjC,EAAA6G,SAAA,SAAAC,EAAAC,EAAA9E,GAGA,GAFA8E,IAAAP,cAEAzG,KAAA+G,EAAA,KAAAC,GACA,UAAAhC,UAAAgC,EAAA,IAAAD,EAAA,wBAKA,OAFA/G,KAAA+G,EAAA,KAAAC,GAAA9E,EAEAA,GAIAjC,EAAAgH,SAAA,SAAAC,EAAAC,GACA,IAAAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAf,EACAgB,EAeA,GAZA,kBAAAR,IACAA,GAAA,GAEAS,QAAAC,MACAD,QAAAC,KAAA,6DAAAV,IAKAA,IAAAW,OAGAX,EAAAtF,MAAA,SACA,SAIA,QAAAsF,EACA,SAIA,IAEAR,EAAAzG,EAAAyG,WAAAS,GACS,MAAAW,GACTpB,EAAAzG,EAAAyG,WAAAzG,EAAA0C,UAeA,OAXA2E,EAAAZ,EAAArC,SAAAC,OACAkD,EAAAd,EAAAhD,cACA0D,EAAAV,EAAA5C,WAAAV,QAEAiE,EADA,MAAAX,EAAA5C,WAAArB,UACA,MAEAiE,EAAA5C,WAAArB,UAIAiF,EAAAR,EAAAtF,MAAA,YACA,OAAA8F,IACAR,IAAAa,OAAA,GACAL,EAAA,KAAAJ,MAMAI,EAAAR,EAAAtF,MAAA,YACA,OAAA8F,IACAR,IAAAnD,MAAA,MACA2D,EAAA,KAAAF,EAAArE,UAAAuE,EAAA,KAAAF,EAAAtE,SAAAwE,EAAA,KAAAF,EAAAvE,SAAAyE,EAAA,KAAAF,EAAAxE,aAKAyE,EAAA,IAAAhE,OAAA4D,EAAA,QAEAH,EAAAtF,MAAA,cACA2F,EAAAL,EAAAtD,MAAAwD,KACAG,EAAA9F,OAAA,KAGA8F,EAAA9F,OAAA,IACA8F,EAAA,GAAA3F,MAAA,eAAA2F,EAAA,GAAA3F,MAAA6F,GAEA,IAAAF,EAAA,GAAA9F,SACA8F,EAAA,GAAA3F,MAAA,WAAA2F,EAAA,GAAA3F,MAAA6F,MAAAF,EAAA,GAAA3F,MAAA,WAEA2F,EAAA,GAAA3F,MAAA,eAAA2F,EAAA,GAAA3F,MAAA6F,MAAAF,EAAA,GAAA3F,MAAA,cAcA3B,EAAA+H,GAAAnH,EAAA+E,UAAA,CACAqC,MAAA,WACA,OAAAhI,EAAAD,OAEAkC,OAAA,SAAAgG,EAAA/F,GACA,IAEAhB,EACAuB,EACAyF,EAJAjH,EAAAlB,KAAAiB,OACAiB,EAAAgG,GAAAtH,EAAAF,cASA,GAHAyB,KAAAmB,KAAA8E,MAGA,IAAAlH,GAAA,OAAAN,EAAAJ,WACAkC,EAAA9B,EAAAJ,gBACa,UAAAU,GAAA,OAAAN,EAAAH,WACbiC,EAAA9B,EAAAH,eACa,CACb,IAAAU,KAAAf,EACA,GAAA8B,EAAAN,MAAAxB,EAAAe,GAAAO,QAAAQ,QAAA,CACAiG,EAAA/H,EAAAe,GAAAe,OAEA,MAIAiG,KAAAlI,EAAAC,EAAA+B,eAEAS,EAAAyF,EAAAjH,EAAAgB,EAAAC,GAGA,OAAAO,GAEAxB,MAAA,WACA,OAAAlB,KAAAiB,QAEAH,MAAA,WACA,OAAAd,KAAAgB,QAEAqH,IAAA,SAAAnH,GAGA,OAFAlB,KAAAiB,OAAAa,OAAAZ,GAEAlB,MAEAsI,IAAA,SAAApH,GACA,IAAAqH,EAAArI,EAAAuF,iBAAA9F,KAAA,KAAAK,KAAAiB,OAAAC,GAEA,SAAAsH,EAAA3C,EAAA4C,EAAAC,EAAAC,GACA,OAAA9C,EAAAvC,KAAA8E,MAAAG,EAAAE,GAKA,OAFAzI,KAAAiB,OAAAf,EAAA2E,OAAA,CAAA7E,KAAAiB,OAAAC,GAAAsH,EAAA,GAAAD,EAEAvI,MAEA4I,SAAA,SAAA1H,GACA,IAAAqH,EAAArI,EAAAuF,iBAAA9F,KAAA,KAAAK,KAAAiB,OAAAC,GAEA,SAAAsH,EAAA3C,EAAA4C,EAAAC,EAAAC,GACA,OAAA9C,EAAAvC,KAAA8E,MAAAG,EAAAE,GAKA,OAFAzI,KAAAiB,OAAAf,EAAA2E,OAAA,CAAA3D,GAAAsH,EAAAlF,KAAA8E,MAAApI,KAAAiB,OAAAsH,MAEAvI,MAEA6I,SAAA,SAAA3H,GACA,SAAAsH,EAAA3C,EAAA4C,EAAAC,EAAAC,GACA,IAAAJ,EAAArI,EAAAuF,iBAAAI,EAAA4C,GACA,OAAAnF,KAAA8E,MAAAvC,EAAA0C,GAAAjF,KAAA8E,MAAAK,EAAAF,GAAAjF,KAAA8E,MAAAG,KAKA,OAFAvI,KAAAiB,OAAAf,EAAA2E,OAAA,CAAA7E,KAAAiB,OAAAC,GAAAsH,EAAA,GAEAxI,MAEA8I,OAAA,SAAA5H,GACA,SAAAsH,EAAA3C,EAAA4C,EAAAC,EAAAC,GACA,IAAAJ,EAAArI,EAAAuF,iBAAAI,EAAA4C,GACA,OAAAnF,KAAA8E,MAAAvC,EAAA0C,GAAAjF,KAAA8E,MAAAK,EAAAF,GAKA,OAFAvI,KAAAiB,OAAAf,EAAA2E,OAAA,CAAA7E,KAAAiB,OAAAC,GAAAsH,GAEAxI,MAEA+I,WAAA,SAAA7H,GACA,OAAAoC,KAAAjB,IAAApC,EAAAD,KAAAiB,QAAA2H,SAAA1H,cAQAjB,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,IAAAkI,EAAAlI,EAAA,GACA,cAAAA,EAAA,aACA,IAAAkI,EAAA,KACA,IAAAA,EAAA,KACA,IAAAA,EAAA,WAEA5E,SAAA,CACAC,OAAA,OAMA,WACArE,EAAA6G,SAAA,gBACApF,QAAA,CACAQ,OAAA,QACAP,SAAA,SAEAO,OAAA,SAAAhB,EAAAgB,EAAAC,GACA,IACAO,EADAwG,EAAAjJ,EAAAC,EAAAqD,SAAArB,EAAA,eAoBA,OAjBAhB,GAAA,IAGAgB,IAAAV,QAAA,aAEAkB,EAAAzC,EAAAC,EAAA+B,eAAAf,EAAAgB,EAAAC,GAEAlC,EAAAC,EAAAqD,SAAAb,EAAA,MACAA,IAAAkB,MAAA,IAEAlB,EAAAyG,QAAA,IAAAD,EAAA,OAEAxG,IAAA0G,KAAA,KAEA1G,IAAAwG,EAAA,MAGAxG,GAEAf,SAAA,SAAAuC,GACA,aAAAjE,EAAAC,EAAA2B,eAAAqC,IAAAL,QAAA,OA9BA,GAoCA,WACA,IAAAT,EAAA,CACAiG,KAAA,IACAC,SAAA,+CAEAC,EAAA,CACAF,KAAA,KACAC,SAAA,uDAGAE,EAAApG,EAAAkG,SAAAG,OAAAF,EAAAD,SAAAI,OAAA,SAAAC,GACA,OAAAvG,EAAAkG,SAAA9F,QAAAmG,GAAA,KAEAC,EAAAJ,EAAAJ,KAAA,KAEAQ,EAAA,IAAAA,EAAApI,QAAA,mBAEAvB,EAAA6G,SAAA,kBACApF,QAAA,CACAQ,OAAA,aACAP,SAAA,IAAA8B,OAAAmG,IAEA1H,OAAA,SAAAhB,EAAAgB,EAAAC,GACA,IAAAO,EAGA0D,EACA5B,EACA+B,EAJAsD,EAAA5J,EAAAC,EAAAqD,SAAArB,EAAA,MAAAqH,EAAAnG,EACA0G,EAAA7J,EAAAC,EAAAqD,SAAArB,EAAA,OAAAjC,EAAAC,EAAAqD,SAAArB,EAAA,cAQA,IAFAA,IAAAV,QAAA,aAEA4E,EAAA,EAA2BA,GAAAyD,EAAAP,SAAA7H,OAAgC2E,IAI3D,GAHA5B,EAAAlB,KAAAiB,IAAAsF,EAAAR,KAAAjD,GACAG,EAAAjD,KAAAiB,IAAAsF,EAAAR,KAAAjD,EAAA,GAEA,OAAAlF,GAAA,IAAAA,MAAAsD,GAAAtD,EAAAqF,EAAA,CACAuD,GAAAD,EAAAP,SAAAlD,GAEA5B,EAAA,IACAtD,GAAAsD,GAGA,MAMA,OAFA9B,EAAAzC,EAAAC,EAAA+B,eAAAf,EAAAgB,EAAAC,GAEAO,EAAAoH,GAEAnI,SAAA,SAAAuC,GACA,IACAkC,EACA2D,EAFA7I,EAAAjB,EAAAC,EAAA2B,eAAAqC,GAIA,GAAAhD,EAAA,CACA,IAAAkF,EAAAhD,EAAAkG,SAAA7H,OAAA,EAAyD2E,GAAA,EAAYA,IAAA,CACrE,GAAAnG,EAAAC,EAAAqD,SAAAW,EAAAd,EAAAkG,SAAAlD,IAAA,CACA2D,EAAAzG,KAAAiB,IAAAnB,EAAAiG,KAAAjD,GAEA,MAGA,GAAAnG,EAAAC,EAAAqD,SAAAW,EAAAqF,EAAAD,SAAAlD,IAAA,CACA2D,EAAAzG,KAAAiB,IAAAgF,EAAAF,KAAAjD,GAEA,OAIAlF,GAAA6I,GAAA,EAGA,OAAA7I,KA3EA,GAiFA,WACAjB,EAAA6G,SAAA,qBACApF,QAAA,CACAQ,OAAA,QAEAA,OAAA,SAAAhB,EAAAgB,EAAAC,GACA,IAKAO,EACA4B,EACAL,EAPAtB,EAAA1C,EAAAI,QAAAJ,EAAAW,QAAAL,eACAyJ,EAAA,CACAC,OAAA/H,EAAAN,MAAA,2BACAsI,MAAAhI,EAAAN,MAAA,4BAqBA,IAdAM,IAAAV,QAAA,eAGAkB,EAAAzC,EAAAC,EAAA+B,eAAAf,EAAAgB,EAAAC,GAGAjB,GAAA,GACA8I,EAAAC,OAAAD,EAAAC,OAAAzI,QAAA,aACAwI,EAAAE,MAAAF,EAAAE,MAAA1I,QAAA,cACaN,EAAA,IAAAjB,EAAAC,EAAAqD,SAAAyG,EAAAC,OAAA,OAAAhK,EAAAC,EAAAqD,SAAAyG,EAAAC,OAAA,OACbD,EAAAC,OAAA,IAAAD,EAAAC,QAIAhG,EAAA,EAAuBA,EAAA+F,EAAAC,OAAAxI,OAA2BwC,IAGlD,OAFAK,EAAA0F,EAAAC,OAAAhG,GAEAK,GACA,QACA5B,EAAAzC,EAAAC,EAAAwE,OAAAhC,EAAAC,EAAA0B,SAAAC,OAAAL,GACA,MACA,QACAvB,EAAAzC,EAAAC,EAAAwE,OAAAhC,EAAA,IAAAuB,EAAAtB,EAAA0B,SAAAC,OAAA7C,OAAA,GACA,MAKA,IAAAwC,EAAA+F,EAAAE,MAAAzI,OAAA,EAA8CwC,GAAA,EAAQA,IAGtD,OAFAK,EAAA0F,EAAAE,MAAAjG,GAEAK,GACA,QACA5B,EAAAuB,IAAA+F,EAAAE,MAAAzI,OAAA,EAAAiB,EAAAC,EAAA0B,SAAAC,OAAArE,EAAAC,EAAAwE,OAAAhC,EAAAC,EAAA0B,SAAAC,SAAA0F,EAAAE,MAAAzI,QAAA,EAAAwC,KACA,MACA,QACAvB,EAAAuB,IAAA+F,EAAAE,MAAAzI,OAAA,EAAAiB,EAAA,IAAAzC,EAAAC,EAAAwE,OAAAhC,EAAA,MAAAsH,EAAAE,MAAAzI,QAAA,EAAAwC,GAAAtB,EAAA0B,SAAAC,OAAA7C,OAAA,IACA,MAKA,OAAAiB,KA1DA,GAgEA,WACAzC,EAAA6G,SAAA,wBACApF,QAAA,CACAQ,OAAA,WACAP,SAAA,YAEAO,OAAA,SAAAhB,EAAAgB,EAAAC,GACA,IAAAO,EACAyH,EAAA,kBAAAjJ,GAAAjB,EAAAC,EAAAqB,MAAAL,GAAA,OAAAA,EAAAkJ,gBACA5E,EAAA2E,EAAAvG,MAAA,KAMA,OAJA1B,IAAAV,QAAA,eAAgD,IAEhDkB,EAAAzC,EAAAC,EAAA+B,eAAAH,OAAA0D,EAAA,IAAAtD,EAAAC,GAEAO,EAAA,IAAA8C,EAAA,IAEA7D,SAAA,SAAAuC,GACA,IAAAsB,EAAAvF,EAAAC,EAAAqD,SAAAW,EAAA,MAAAA,EAAAN,MAAA,MAAAM,EAAAN,MAAA,MACA1C,EAAAY,OAAA0D,EAAA,IACAY,EAAAtE,OAAA0D,EAAA,IAIA,SAAAgD,EAAA3C,EAAA4C,EAAAC,EAAAC,GACA,IAAAJ,EAAAtI,EAAAC,EAAAuF,iBAAAI,EAAA4C,GACA4B,EAAAxE,EAAA0C,GAAAE,EAAAF,SACA,OAAA8B,EAGA,OARAjE,EAAAnG,EAAAC,EAAAqD,SAAAW,EAAA,MAAAkC,IAAA,EAAAA,EAQAnG,EAAAC,EAAA2E,OAAA,CAAA3D,EAAAoC,KAAAiB,IAAA,GAAA6B,IAAAoC,EAAA,MA9BA,GAoCA,WACAvI,EAAA6G,SAAA,oBACApF,QAAA,CACAQ,OAAA,OAEAA,OAAA,SAAAhB,EAAAgB,EAAAC,GACA,IACAO,EADAC,EAAA1C,EAAAI,QAAAJ,EAAAW,QAAAL,eAEAyI,EAAA/I,EAAAC,EAAAqD,SAAArB,EAAA,aASA,OANAA,IAAAV,QAAA,WAEAwH,GAAArG,EAAAqG,QAAA9H,GAEAwB,EAAAzC,EAAAC,EAAA+B,eAAAf,EAAAgB,EAAAC,GAEAO,EAAAsG,KAjBA,GAuBA,WACA/I,EAAA6G,SAAA,uBACApF,QAAA,CACAQ,OAAA,MACAP,SAAA,OAEAO,OAAA,SAAAhB,EAAAgB,EAAAC,GACA,IACAO,EADAwG,EAAAjJ,EAAAC,EAAAqD,SAAArB,EAAA,aAsBA,OAnBAjC,EAAAW,QAAAD,oBACAO,GAAA,KAIAgB,IAAAV,QAAA,YAEAkB,EAAAzC,EAAAC,EAAA+B,eAAAf,EAAAgB,EAAAC,GAEAlC,EAAAC,EAAAqD,SAAAb,EAAA,MACAA,IAAAkB,MAAA,IAEAlB,EAAAyG,QAAA,IAAAD,EAAA,KAEAxG,IAAA0G,KAAA,KAEA1G,IAAAwG,EAAA,IAGAxG,GAEAf,SAAA,SAAAuC,GACA,IAAAnD,EAAAd,EAAAC,EAAA2B,eAAAqC,GACA,OAAAjE,EAAAW,QAAAD,kBACA,IAAAI,EAEAA,KApCA,GA0CA,WACAd,EAAA6G,SAAA,iBACApF,QAAA,CACAQ,OAAA,MACAP,SAAA,OAEAO,OAAA,SAAAhB,EAAAgB,EAAAC,GACA,IAAAmI,EAAAhH,KAAAiH,MAAArJ,EAAA,OACAsJ,EAAAlH,KAAAiH,OAAArJ,EAAA,GAAAoJ,EAAA,QACAG,EAAAnH,KAAA8E,MAAAlH,EAAA,GAAAoJ,EAAA,MAAAE,GAEA,OAAAF,EAAA,KAAAE,EAAA,OAAAA,KAAA,KAAAC,EAAA,OAAAA,MAEA9I,SAAA,SAAAuC,GACA,IAAAwG,EAAAxG,EAAAN,MAAA,KACA6G,EAAA,EAgBA,OAbA,IAAAC,EAAAjJ,QAEAgJ,GAAA,GAAA3I,OAAA4I,EAAA,OAEAD,GAAA,GAAA3I,OAAA4I,EAAA,IAEAD,GAAA3I,OAAA4I,EAAA,KACa,IAAAA,EAAAjJ,SAEbgJ,GAAA,GAAA3I,OAAA4I,EAAA,IAEAD,GAAA3I,OAAA4I,EAAA,KAEA5I,OAAA2I,MA/BA,GAoCAxK,2BCn/BA,SAAA0K,GAyBA,SAAAC,EAAApF,EAAAqF,GAGA,IADA,IAAAC,EAAA,EACA7G,EAAAuB,EAAA/D,OAAA,EAAgCwC,GAAA,EAAQA,IAAA,CACxC,IAAA8G,EAAAvF,EAAAvB,GACA,MAAA8G,EACAvF,EAAA2D,OAAAlF,EAAA,GACK,OAAA8G,GACLvF,EAAA2D,OAAAlF,EAAA,GACA6G,KACKA,IACLtF,EAAA2D,OAAAlF,EAAA,GACA6G,KAKA,GAAAD,EACA,KAAUC,IAAMA,EAChBtF,EAAAwF,QAAA,MAIA,OAAAxF,EAKA,IAAAyF,EACA,gEACAC,EAAA,SAAAC,GACA,OAAAF,EAAAG,KAAAD,GAAApH,MAAA,IAuJA,SAAA2F,EAAA2B,EAAAC,GACA,GAAAD,EAAA3B,OAAA,OAAA2B,EAAA3B,OAAA4B,GAEA,IADA,IAAAC,EAAA,GACAtH,EAAA,EAAmBA,EAAAoH,EAAA5J,OAAewC,IAClCqH,EAAAD,EAAApH,KAAAoH,IAAAE,EAAAC,KAAAH,EAAApH,IAEA,OAAAsH,EAxJA3L,EAAA6L,QAAA,WAIA,IAHA,IAAAC,EAAA,GACAC,GAAA,EAEA1H,EAAAoB,UAAA5D,OAAA,EAAoCwC,IAAA,IAAA0H,EAA8B1H,IAAA,CAClE,IAAA2H,EAAA3H,GAAA,EAAAoB,UAAApB,GAAA0G,EAAAkB,MAGA,qBAAAD,EACA,UAAA5G,UAAA,6CACK4G,IAILF,EAAAE,EAAA,IAAAF,EACAC,EAAA,MAAAC,EAAAE,OAAA,IAWA,OAJAJ,EAAAd,EAAAlB,EAAAgC,EAAA9H,MAAA,cAAAmI,GACA,QAAAA,KACGJ,GAAAvC,KAAA,MAEHuC,EAAA,QAAAD,GAAA,KAKA9L,EAAAoM,UAAA,SAAAJ,GACA,IAAAK,EAAArM,EAAAqM,WAAAL,GACAM,EAAA,MAAAnE,EAAA6D,GAAA,GAcA,OAXAA,EAAAhB,EAAAlB,EAAAkC,EAAAhI,MAAA,cAAAmI,GACA,QAAAA,KACGE,GAAA7C,KAAA,KAEHwC,GAAAK,IACAL,EAAA,KAEAA,GAAAM,IACAN,GAAA,MAGAK,EAAA,QAAAL,GAIAhM,EAAAqM,WAAA,SAAAL,GACA,YAAAA,EAAAE,OAAA,IAIAlM,EAAAwJ,KAAA,WACA,IAAA+C,EAAAxG,MAAAC,UAAA7B,MAAApE,KAAA0F,UAAA,GACA,OAAAzF,EAAAoM,UAAAtC,EAAAyC,EAAA,SAAAJ,EAAAK,GACA,qBAAAL,EACA,UAAA/G,UAAA,0CAEA,OAAA+G,IACG3C,KAAA,OAMHxJ,EAAAyM,SAAA,SAAAC,EAAAC,GAIA,SAAA1E,EAAA2E,GAEA,IADA,IAAA5H,EAAA,EACUA,EAAA4H,EAAA/K,OAAoBmD,IAC9B,QAAA4H,EAAA5H,GAAA,MAIA,IADA,IAAA6H,EAAAD,EAAA/K,OAAA,EACUgL,GAAA,EAAUA,IACpB,QAAAD,EAAAC,GAAA,MAGA,OAAA7H,EAAA6H,EAAA,GACAD,EAAAzI,MAAAa,EAAA6H,EAAA7H,EAAA,GAfA0H,EAAA1M,EAAA6L,QAAAa,GAAAvE,OAAA,GACAwE,EAAA3M,EAAA6L,QAAAc,GAAAxE,OAAA,GAsBA,IALA,IAAA2E,EAAA7E,EAAAyE,EAAA1I,MAAA,MACA+I,EAAA9E,EAAA0E,EAAA3I,MAAA,MAEAnC,EAAA6B,KAAAkB,IAAAkI,EAAAjL,OAAAkL,EAAAlL,QACAmL,EAAAnL,EACAwC,EAAA,EAAiBA,EAAAxC,EAAYwC,IAC7B,GAAAyI,EAAAzI,KAAA0I,EAAA1I,GAAA,CACA2I,EAAA3I,EACA,MAIA,IAAA4I,EAAA,GACA,IAAA5I,EAAA2I,EAA+B3I,EAAAyI,EAAAjL,OAAsBwC,IACrD4I,EAAArB,KAAA,MAKA,OAFAqB,IAAApD,OAAAkD,EAAA5I,MAAA6I,IAEAC,EAAAzD,KAAA,MAGAxJ,EAAAkN,IAAA,IACAlN,EAAAmN,UAAA,IAEAnN,EAAAoN,QAAA,SAAApB,GACA,IAAAqB,EAAA/B,EAAAU,GACAsB,EAAAD,EAAA,GACAE,EAAAF,EAAA,GAEA,OAAAC,GAAAC,GAKAA,IAEAA,IAAApF,OAAA,EAAAoF,EAAA1L,OAAA,IAGAyL,EAAAC,GARA,KAYAvN,EAAAwN,SAAA,SAAAxB,EAAAyB,GACA,IAAA/B,EAAAJ,EAAAU,GAAA,GAKA,OAHAyB,GAAA/B,EAAAvD,QAAA,EAAAsF,EAAA5L,UAAA4L,IACA/B,IAAAvD,OAAA,EAAAuD,EAAA7J,OAAA4L,EAAA5L,SAEA6J,GAIA1L,EAAA0N,QAAA,SAAA1B,GACA,OAAAV,EAAAU,GAAA,IAaA,IAAA7D,EAAA,WAAAA,QAAA,GACA,SAAAwF,EAAA3I,EAAAO,GAAkC,OAAAoI,EAAAxF,OAAAnD,EAAAO,IAClC,SAAAoI,EAAA3I,EAAAO,GAEA,OADAP,EAAA,IAAAA,EAAA2I,EAAA9L,OAAAmD,GACA2I,EAAAxF,OAAAnD,EAAAO,iDC7NA,IAAA5F,EAAAiO,EAAAhO;;;;;;;;;;;;;CAOA,SAAAC,EAAAC,GAEQ8N,EAAO,CAAC3N,EAAA,SAAUN,EAAA,EAASC,EAAA,oBAAAD,IAAAkO,MAAA7N,EAAA4N,GAAAjO,OAAAQ,IAAAP,IAAAM,EAAAF,QAAAJ,IAFnC,CAQCQ,EAAA,SAAAC,IAED,WACAA,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,MACAD,QAAA,MACAD,QAAA,OACAD,SAAA,QAEAgG,QAAA,SAAAjI,GASA,UAEAsD,SAAA,CACAC,OAAA,SAxBA,GA8BA,WAEArE,EAAA6G,SAAA,gBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,KACAD,QAAA,KACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,OAjBA,GAuBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,OACAD,QAAA,OACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,WACA,WAEA3E,SAAA,CACAC,OAAA,QAhBA,GAsBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,MACAD,QAAA,MACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,SAhBA,GAsBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,SAhBA,GAsBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,IAAAkI,EAAAlI,EAAA,GACA,cAAAA,EAAA,aACA,IAAAkI,EAAA,KACA,IAAAA,EAAA,KACA,IAAAA,EAAA,WAEA5E,SAAA,CACAC,OAAA,OApBA,GA0BA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,IAAAkI,EAAAlI,EAAA,GACA,cAAAA,EAAA,aACA,IAAAkI,EAAA,KACA,IAAAA,EAAA,KACA,IAAAA,EAAA,WAEA5E,SAAA,CACAC,OAAA,OApBA,GA0BA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,IAAAkI,EAAAlI,EAAA,GACA,cAAAA,EAAA,aACA,IAAAkI,EAAA,KACA,IAAAA,EAAA,KACA,IAAAA,EAAA,WAEA5E,SAAA,CACAC,OAAA,OApBA,GA0BA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,KACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,IAAAkI,EAAAlI,EAAA,GACA,WAAAkI,GAAA,IAAAA,EAAA,KACA,IAAAA,EAAA,KACA,IAAAA,GAAA,IAAAA,EAAA,KACA,IAAAA,EAAA,KACA,IAAAA,EAAA,WAEA5E,SAAA,CACAC,OAAA,OArBA,GA2BA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,KACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,IAAAkI,EAAAlI,EAAA,GACA,WAAAkI,GAAA,IAAAA,EAAA,KACA,IAAAA,EAAA,KACA,IAAAA,GAAA,IAAAA,EAAA,KACA,IAAAA,EAAA,KACA,IAAAA,EAAA,WAEA5E,SAAA,CACAC,OAAA,OArBA,GA2BA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,OACAD,QAAA,OACAD,QAAA,OACAD,SAAA,QAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAAAA,EAAA,UAEAsD,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAAAA,EAAA,UAEAsD,SAAA,CACAC,OAAA,SAhBA,GAsBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAAAA,EAAA,UAEAsD,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,MACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,SAhBA,GAsBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,OACAD,QAAA,MACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,KACAD,QAAA,KACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,UACAD,QAAA,SACAD,QAAA,UACAD,SAAA,WAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,OACAD,QAAA,OACAD,SAAA,QAEAgG,QAAA,SAAAjI,GACA,IAAA2M,EAAA3M,EAAA,IAEA,WAAAA,GAAA2M,GAAA,OAAAA,MAAA,eAEArJ,SAAA,CACAC,OAAA,QAlBA,GAwBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,MACAD,QAAA,MACAD,SAAA,OAEAgG,QAAA,SAAAjI,GACA,IAAA2M,EAAA3M,EAAA,IACA,WAAAA,GAAA2M,GAAA,OAAAA,MAAA,eAEArJ,SAAA,CACAC,OAAA,QAjBA,GAuBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,QAhBA,GAsBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,OACAD,QAAA,MACAD,QAAA,MACAD,SAAA,OAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,SAhBA,GAsBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,MACAD,QAAA,UACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,QAhBA,GAsBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,OACAD,QAAA,MACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,WAIA,WAEA3E,SAAA,CACAC,OAAA,OAnBA,GAyBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,OACAD,QAAA,OACAD,QAAA,QACAD,SAAA,SAEAgG,QAAA,WAIA,WAEA3E,SAAA,CACAC,OAAA,UAnBA,GAyBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,OACAD,QAAA,OACAD,QAAA,IACAD,SAAA,KAEAgG,QAAA,WACA,WAEA3E,SAAA,CACAC,OAAA,OAhBA,GAsBA,WACArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,IACAD,QAAA,MACAD,QAAA,MACAD,SAAA,YAEAgG,QAAA,WACA,WAEA3E,SAAA,CACAC,OAAA,OAhBA,GAsBA,WAGArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,MACAD,QAAA,OACAD,QAAA,UACAD,SAAA,YAEAgG,QAAA,SAAAjI,GACA,WAEAsD,SAAA,CACAC,OAAA,OAlBA,GAwBA,WACA,IAAAgF,EAAA,CACAqE,EAAA,QACAC,EAAA,QACAC,EAAA,QACAC,GAAA,QACAC,GAAA,QAEAC,EAAA,OACAC,EAAA,OACAC,GAAA,OACAC,GAAA,OAEAC,EAAA,QACAC,EAAA,QACAC,IAAA,QAEAC,EAAA,OAEAC,EAAA,QACAC,GAAA,QACAC,GAAA,QAEAC,GAAA,QACAC,GAAA,SAGA3O,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,MACAD,QAAA,SACAD,QAAA,SACAD,SAAA,WAEAgG,QAAA,SAAAjI,GACA,OAAAA,EACA,cAGA,IAAA8N,EAAA9N,EAAA,GACAkI,EAAAlI,EAAA,IAAA8N,EACAC,EAAA/N,GAAA,aAEA,OAAAuI,EAAAuF,IAAAvF,EAAAL,IAAAK,EAAAwF,IAEAzK,SAAA,CACAC,OAAA,OAlDA,GAwDA,WACArE,EAAA6G,SAAA,kBACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,OACAD,QAAA,MACAD,QAAA,OACAD,SAAA,OAEAgG,QAAA,WAIA,UAEA3E,SAAA,CACAC,OAAA,OAnBA,GAyBA,WAEArE,EAAA6G,SAAA,eACAhD,WAAA,CACArB,UAAA,IACAW,QAAA,KAEAM,cAAA,CACAP,SAAA,SACAD,QAAA,SACAD,QAAA,MACAD,SAAA,aAEAgG,QAAA,WACA,WAEA3E,SAAA,CACAC,OAAA,OAjBA","file":"js/chunk-vendors~b58f7129.c871ddb0.js","sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","/*! @preserve\n * numeral.js\n * locales : 2.0.6\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['numeral'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        factory(require('./numeral'));\n    } else {\n        factory(global.numeral);\n    }\n}(this, function (numeral) {\n    \n(function() {\n        numeral.register('locale', 'bg', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: { // I found these here http://www.unicode.org/cldr/charts/28/verify/numbers/bg.html\n            thousand: 'хил',\n            million: 'млн',\n            billion: 'млрд',\n            trillion: 'трлн'\n        },\n        ordinal: function (number) {\n            // google translate suggests:\n            // 1st=1-ви; 2nd=2-ри; 7th=7-ми;\n            // 8th=8-ми and many others end with -ти\n            // for example 3rd=3-ти\n            // However since I've seen suggestions that in\n            // Bulgarian the ordinal can be taken in\n            // different forms (masculine, feminine, neuter)\n            // I've opted to wimp out on commiting that to code\n            return '';\n        },\n        currency: {\n            symbol: 'лв'\n        }\n    });\n})();\n\n\n(function() {\n    \n    numeral.register('locale', 'chs', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: '千',\n            million: '百万',\n            billion: '十亿',\n            trillion: '兆'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '¥'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'cs', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'tis.',\n            million: 'mil.',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: 'Kč'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'da-dk', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mio',\n            billion: 'mia',\n            trillion: 'b'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'DKK'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'de-ch', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'CHF'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'de', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'en-au', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'en-gb', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '£'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'en-za', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                    (b === 2) ? 'nd' :\n                        (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: 'R'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'es-es', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (b === 1 || b === 3) ? 'er' :\n                (b === 2) ? 'do' :\n                    (b === 7 || b === 0) ? 'mo' :\n                        (b === 8) ? 'vo' :\n                            (b === 9) ? 'no' : 'to';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'es', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (b === 1 || b === 3) ? 'er' :\n                (b === 2) ? 'do' :\n                (b === 7 || b === 0) ? 'mo' :\n\t\t(b === 8) ? 'vo' :\n\t\t(b === 9) ? 'no' : 'to';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'et', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: ' tuh',\n            million: ' mln',\n            billion: ' mld',\n            trillion: ' trl'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fi', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'M',\n            billion: 'G',\n            trillion: 'T'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fr-ca', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'M',\n            billion: 'G',\n            trillion: 'T'\n        },\n        ordinal : function (number) {\n            return number === 1 ? 'er' : 'e';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fr-ch', {\n        delimiters: {\n            thousands: '\\'',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal : function (number) {\n            return number === 1 ? 'er' : 'e';\n        },\n        currency: {\n            symbol: 'CHF'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fr', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal : function (number) {\n            return number === 1 ? 'er' : 'e';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'hu', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'E',  // ezer\n            million: 'M',   // millió\n            billion: 'Mrd', // milliárd\n            trillion: 'T'   // trillió\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: ' Ft'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'it', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'mila',\n            million: 'mil',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return 'º';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ja', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: '千',\n            million: '百万',\n            billion: '十億',\n            trillion: '兆'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '¥'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'lv', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: ' tūkst.',\n            million: ' milj.',\n            billion: ' mljrd.',\n            trillion: ' trilj.'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'nl-be', {\n        delimiters: {\n            thousands: ' ',\n            decimal  : ','\n        },\n        abbreviations: {\n            thousand : 'k',\n            million  : ' mln',\n            billion  : ' mld',\n            trillion : ' bln'\n        },\n        ordinal : function (number) {\n            var remainder = number % 100;\n\n            return (number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20) ? 'ste' : 'de';\n        },\n        currency: {\n            symbol: '€ '\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'nl-nl', {\n        delimiters: {\n            thousands: '.',\n            decimal  : ','\n        },\n        abbreviations: {\n            thousand : 'k',\n            million  : 'mln',\n            billion  : 'mrd',\n            trillion : 'bln'\n        },\n        ordinal : function (number) {\n            var remainder = number % 100;\n            return (number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20) ? 'ste' : 'de';\n        },\n        currency: {\n            symbol: '€ '\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'no', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'kr'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'pl', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'tys.',\n            million: 'mln',\n            billion: 'mld',\n            trillion: 'bln'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'PLN'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'pt-br', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'mil',\n            million: 'milhões',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return 'º';\n        },\n        currency: {\n            symbol: 'R$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'pt-pt', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal : function (number) {\n            return 'º';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ru-ua', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'тыс.',\n            million: 'млн',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function () {\n            // not ideal, but since in Russian it can taken on\n            // different forms (masculine, feminine, neuter)\n            // this is all we can do\n            return '.';\n        },\n        currency: {\n            symbol: '\\u20B4'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ru', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'тыс.',\n            million: 'млн.',\n            billion: 'млрд.',\n            trillion: 'трлн.'\n        },\n        ordinal: function () {\n            // not ideal, but since in Russian it can taken on\n            // different forms (masculine, feminine, neuter)\n            // this is all we can do\n            return '.';\n        },\n        currency: {\n            symbol: 'руб.'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'sk', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'tis.',\n            million: 'mil.',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'sl', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mio',\n            billion: 'mrd',\n            trillion: 'trilijon'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n    \n\n    numeral.register('locale', 'th', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'พัน',\n            million: 'ล้าน',\n            billion: 'พันล้าน',\n            trillion: 'ล้านล้าน'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '฿'\n        }\n    });\n})();\n\n\n(function() {\n        var suffixes = {\n            1: '\\'inci',\n            5: '\\'inci',\n            8: '\\'inci',\n            70: '\\'inci',\n            80: '\\'inci',\n\n            2: '\\'nci',\n            7: '\\'nci',\n            20: '\\'nci',\n            50: '\\'nci',\n\n            3: '\\'üncü',\n            4: '\\'üncü',\n            100: '\\'üncü',\n\n            6: '\\'ncı',\n\n            9: '\\'uncu',\n            10: '\\'uncu',\n            30: '\\'uncu',\n\n            60: '\\'ıncı',\n            90: '\\'ıncı'\n        };\n\n    numeral.register('locale', 'tr', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'bin',\n            million: 'milyon',\n            billion: 'milyar',\n            trillion: 'trilyon'\n        },\n        ordinal: function (number) {\n            if (number === 0) {  // special case for zero\n                return '\\'ıncı';\n            }\n\n            var a = number % 10,\n                b = number % 100 - a,\n                c = number >= 100 ? 100 : null;\n\n          return suffixes[a] || suffixes[b] || suffixes[c];\n        },\n        currency: {\n            symbol: '\\u20BA'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'uk-ua', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'тис.',\n            million: 'млн',\n            billion: 'млрд',\n            trillion: 'блн'\n        },\n        ordinal: function () {\n            // not ideal, but since in Ukrainian it can taken on\n            // different forms (masculine, feminine, neuter)\n            // this is all we can do\n            return '';\n        },\n        currency: {\n            symbol: '\\u20B4'\n        }\n    });\n})();\n\n\n(function() {\n    \n    numeral.register('locale', 'vi', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: ' nghìn',\n            million: ' triệu',\n            billion: ' tỷ',\n            trillion: ' nghìn tỷ'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: '₫'\n        }\n    });\n})();\n\n\n}));\n"],"sourceRoot":""}